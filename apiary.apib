FORMAT: 1A

# QE System
REST Api for data communication with the QE System database.

//TODO: 
 - *Authentication scheme?* Probably OAuth2
 - *Query filtering?* There should be some query syntax to allow for filtering, sorting, etc.
 - *Bulk insert?* We can send arrays with nested data.
 - *Aggregations?* 
 - *Joins?*
 
## Table name [/<table-name>]
Name of the resource you want to access.

### List all items [GET]
+ Response 200 (application/json)
        
        {  
          "data":[  
            {  
              "id":"..."
            },
            {  
              "id":"..."
            }]
        }

### Get single item [GET /<table-name>/{id}]
+ Parameters
    + id (string) - Id of an item to retrieve
    
+ Response 200
    
        {
            "id": "..."
        }

### Join item with related data [GET /<table-name>/{id}/<related-table>]
To get related items for a specific item, you can put name of the related table 
after the id and you will get the related items. (1:N)

+ Parameters
    + id (string) - Id of an item to retrieve
    
+ Response 200  (application/json)

        {  
          "id": {
            "<related-table>": [{'...'},{'...'}]
          }
        }


### Creating items [POST /<table-name>]
You can specify single or multiple items to create.

+ Request (application/json)

        {[
            {"id": "..."},
            {"id": "..."},
        ]}

+ Response 201 (application/json)
        
        {[
            {"id": "..."},
            {"id": "..."},
        ]}

+ Request (application/json)

        {
            "id": "..."
        }
        
+ Response 201 (application/json)
        
        {
            "id": "..."
        }

### Updating items [PUT /<table-name>/]
Updating works the same as creating items.

+ Request (application/json)
        
        {
            "id": "..."
        }
        
+ Response 200 (application/json)
        
        {
            "id": ".."
        }
        
+ Request (application/json)

        {[
            {"id": "..."},
            {"id": "..."},
        ]}

+ Response 201 (application/json)
        
        {[
            {"id": "..."},
            {"id": "..."},
        ]}
        
### Delete single item [DELETE /<table-name>/{id}]

+ Response 204